[
    {
        "id": "40e2d7bc7787ade7",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "78e567fe49f2df20",
        "type": "mqtt-broker",
        "name": "AC Server",
        "broker": "192.168.57.129",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "a6471fb1cc0ba838",
        "type": "ui_tab",
        "name": "AC Control",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "0dd3b2ba6ee30dd5",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "4a30a8e0116ae52c",
        "type": "ui_group",
        "name": "Parameters",
        "tab": "a6471fb1cc0ba838",
        "order": 1,
        "disp": true,
        "width": 24,
        "collapse": false,
        "className": ""
    },
    {
        "id": "ui_numeric",
        "type": "ui_numeric",
        "z": "40e2d7bc7787ade7",
        "name": "",
        "label": "Air Temperature",
        "tooltip": "°C",
        "group": "4a30a8e0116ae52c",
        "order": 1,
        "width": 6,
        "height": 2,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "topicType": "str",
        "format": "{{value}}",
        "min": 0,
        "max": "40",
        "step": "0.5",
        "className": "",
        "x": 160,
        "y": 160,
        "wires": [
            [
                "change"
            ]
        ]
    },
    {
        "id": "change",
        "type": "change",
        "z": "40e2d7bc7787ade7",
        "name": "Set Flow Air Temperature",
        "rules": [
            {
                "t": "set",
                "p": "airTemperature",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "x": 470,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "function",
        "type": "function",
        "z": "40e2d7bc7787ade7",
        "name": "Format airTemperature Payload",
        "func": "var airTemperature = flow.get('airTemperature') || 0;\nmsg.payload = {\n    ta: airTemperature\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 480,
        "wires": [
            [
                "mqtt_out"
            ]
        ]
    },
    {
        "id": "mqtt_out",
        "type": "mqtt out",
        "z": "40e2d7bc7787ade7",
        "name": "",
        "topic": "ac/control/airTemperature",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "78e567fe49f2df20",
        "x": 990,
        "y": 480,
        "wires": []
    },
    {
        "id": "ab92d6af8c695e6f",
        "type": "ui_numeric",
        "z": "40e2d7bc7787ade7",
        "name": "",
        "label": "Radiant Temperature",
        "tooltip": "°C",
        "group": "4a30a8e0116ae52c",
        "order": 5,
        "width": 6,
        "height": 2,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "topicType": "str",
        "format": "{{value}}",
        "min": 0,
        "max": "40",
        "step": "0.5",
        "className": "",
        "x": 180,
        "y": 200,
        "wires": [
            [
                "8de2a8451ddb7b64"
            ]
        ]
    },
    {
        "id": "8de2a8451ddb7b64",
        "type": "change",
        "z": "40e2d7bc7787ade7",
        "name": "Set Flow Radiant Temperature",
        "rules": [
            {
                "t": "set",
                "p": "radiantTemperature",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "x": 490,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "93f150bd0f2d746c",
        "type": "inject",
        "z": "40e2d7bc7787ade7",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 480,
        "wires": [
            [
                "function",
                "d811f914c1ad7784",
                "cd4b3e52c142eb40",
                "6b51aa2468ea660f",
                "1b810ae1d81f7273",
                "463fdbc6f696ddb4",
                "3ac6e664bd290627",
                "ddfe7c3269d598fd",
                "4e6e75fa207828ff"
            ]
        ]
    },
    {
        "id": "d811f914c1ad7784",
        "type": "function",
        "z": "40e2d7bc7787ade7",
        "name": "Format radiantTemperature Payload",
        "func": "var radiantTemperature = flow.get('radiantTemperature') || 0;\nmsg.payload = {\n    tr: radiantTemperature\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 520,
        "wires": [
            [
                "4f68b3287b400be3"
            ]
        ]
    },
    {
        "id": "4f68b3287b400be3",
        "type": "mqtt out",
        "z": "40e2d7bc7787ade7",
        "name": "",
        "topic": "ac/control/radiantTemperature",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "78e567fe49f2df20",
        "x": 970,
        "y": 520,
        "wires": []
    },
    {
        "id": "5b91c50e1655611d",
        "type": "ui_numeric",
        "z": "40e2d7bc7787ade7",
        "name": "",
        "label": "Air Velocity",
        "tooltip": "m/s",
        "group": "4a30a8e0116ae52c",
        "order": 7,
        "width": 6,
        "height": 2,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "topicType": "str",
        "format": "{{value}}",
        "min": 0,
        "max": "4",
        "step": "0.1",
        "className": "",
        "x": 150,
        "y": 240,
        "wires": [
            [
                "ba8238353d387186"
            ]
        ]
    },
    {
        "id": "ba8238353d387186",
        "type": "change",
        "z": "40e2d7bc7787ade7",
        "name": "Set Flow Air Velocity",
        "rules": [
            {
                "t": "set",
                "p": "airVelocity",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "x": 460,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "940e4cabd6a37d2a",
        "type": "ui_numeric",
        "z": "40e2d7bc7787ade7",
        "name": "",
        "label": "Relative Humidity",
        "tooltip": "%",
        "group": "4a30a8e0116ae52c",
        "order": 2,
        "width": 6,
        "height": 2,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "topicType": "str",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "step": "1",
        "className": "",
        "x": 170,
        "y": 280,
        "wires": [
            [
                "30e06704f503b09b"
            ]
        ]
    },
    {
        "id": "30e06704f503b09b",
        "type": "change",
        "z": "40e2d7bc7787ade7",
        "name": "Set Flow Relative Humidity",
        "rules": [
            {
                "t": "set",
                "p": "relativeHumidity",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "x": 480,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "591593ec76cd8a4f",
        "type": "ui_numeric",
        "z": "40e2d7bc7787ade7",
        "name": "",
        "label": "Metabolic Rate",
        "tooltip": "",
        "group": "4a30a8e0116ae52c",
        "order": 6,
        "width": 6,
        "height": 2,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "topicType": "str",
        "format": "{{value}}",
        "min": "0.7",
        "max": "4",
        "step": "0.1",
        "className": "",
        "x": 160,
        "y": 320,
        "wires": [
            [
                "87d4fb7e48a7684d"
            ]
        ]
    },
    {
        "id": "87d4fb7e48a7684d",
        "type": "change",
        "z": "40e2d7bc7787ade7",
        "name": "Set Flow Metabolic Rate",
        "rules": [
            {
                "t": "set",
                "p": "metabolicRate",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "x": 470,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "30e7ea97f31845cb",
        "type": "ui_numeric",
        "z": "40e2d7bc7787ade7",
        "name": "",
        "label": "Clothing Level",
        "tooltip": "",
        "group": "4a30a8e0116ae52c",
        "order": 8,
        "width": 6,
        "height": 2,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "topicType": "str",
        "format": "{{value}}",
        "min": 0,
        "max": "1.5",
        "step": "0.1",
        "className": "",
        "x": 160,
        "y": 360,
        "wires": [
            [
                "405531b4500c5385"
            ]
        ]
    },
    {
        "id": "405531b4500c5385",
        "type": "change",
        "z": "40e2d7bc7787ade7",
        "name": "Set Flow Clothing Level",
        "rules": [
            {
                "t": "set",
                "p": "clothingLevel",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "x": 470,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "6b51aa2468ea660f",
        "type": "function",
        "z": "40e2d7bc7787ade7",
        "name": "Format relativeHumidity Payload",
        "func": "var relativeHumidity = flow.get('relativeHumidity') || 0;\nmsg.payload = {\n    rh: relativeHumidity\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 600,
        "wires": [
            [
                "3239817bc09c4509"
            ]
        ]
    },
    {
        "id": "3239817bc09c4509",
        "type": "mqtt out",
        "z": "40e2d7bc7787ade7",
        "name": "",
        "topic": "ac/control/relativeHumidity",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "78e567fe49f2df20",
        "x": 980,
        "y": 600,
        "wires": []
    },
    {
        "id": "cd4b3e52c142eb40",
        "type": "function",
        "z": "40e2d7bc7787ade7",
        "name": "Format airVelocity Payload",
        "func": "var airVelocity = flow.get('airVelocity') || 0;\nmsg.payload = {\n    vel: airVelocity\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 560,
        "wires": [
            [
                "2f635c3b83646121"
            ]
        ]
    },
    {
        "id": "2f635c3b83646121",
        "type": "mqtt out",
        "z": "40e2d7bc7787ade7",
        "name": "",
        "topic": "ac/control/airVelocity",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "78e567fe49f2df20",
        "x": 1000,
        "y": 560,
        "wires": []
    },
    {
        "id": "463fdbc6f696ddb4",
        "type": "function",
        "z": "40e2d7bc7787ade7",
        "name": "Format clothingLevel Payload",
        "func": "var clothingLevel = flow.get('clothingLevel') || 0;\nmsg.payload = {\n    clo: clothingLevel\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 680,
        "wires": [
            [
                "6b99a46d7c8fa3bd"
            ]
        ]
    },
    {
        "id": "6b99a46d7c8fa3bd",
        "type": "mqtt out",
        "z": "40e2d7bc7787ade7",
        "name": "",
        "topic": "ac/control/clothingLevel",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "78e567fe49f2df20",
        "x": 990,
        "y": 680,
        "wires": []
    },
    {
        "id": "1b810ae1d81f7273",
        "type": "function",
        "z": "40e2d7bc7787ade7",
        "name": "Format metabolicRate Payload",
        "func": "var metabolicRate = flow.get('metabolicRate') || 0;\nmsg.payload = {\n    met: metabolicRate\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 640,
        "wires": [
            [
                "3814ac52f721ae94"
            ]
        ]
    },
    {
        "id": "3814ac52f721ae94",
        "type": "mqtt out",
        "z": "40e2d7bc7787ade7",
        "name": "",
        "topic": "ac/control/metabolicRate",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "78e567fe49f2df20",
        "x": 990,
        "y": 640,
        "wires": []
    },
    {
        "id": "7cd2c197a5d8b070",
        "type": "function",
        "z": "40e2d7bc7787ade7",
        "name": "Parse PMV Payload",
        "func": "var data = JSON.parse(msg.payload);\nmsg.payload = parseFloat(data.pmv).toFixed(4);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1000,
        "wires": [
            [
                "199a4212e85eb7aa"
            ]
        ]
    },
    {
        "id": "450356948057598f",
        "type": "mqtt in",
        "z": "40e2d7bc7787ade7",
        "name": "",
        "topic": "ac/control/pmv",
        "qos": "2",
        "datatype": "utf8",
        "broker": "78e567fe49f2df20",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 1000,
        "wires": [
            [
                "7cd2c197a5d8b070",
                "b6b7f037a277da73"
            ]
        ]
    },
    {
        "id": "199a4212e85eb7aa",
        "type": "ui_gauge",
        "z": "40e2d7bc7787ade7",
        "name": "",
        "group": "4a30a8e0116ae52c",
        "order": 3,
        "width": 6,
        "height": 4,
        "gtype": "gage",
        "title": "PMV",
        "label": "units",
        "format": "{{value}}",
        "min": "-3",
        "max": "3",
        "colors": [
            "#1f77b4",
            "#00b500",
            "#ca3838"
        ],
        "seg1": "-1",
        "seg2": "1",
        "diff": false,
        "className": "",
        "x": 1050,
        "y": 1000,
        "wires": []
    },
    {
        "id": "d0b802cb869795df",
        "type": "mqtt in",
        "z": "40e2d7bc7787ade7",
        "name": "",
        "topic": "ac/control/ppd",
        "qos": "2",
        "datatype": "utf8",
        "broker": "78e567fe49f2df20",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 1040,
        "wires": [
            [
                "18fb7b8b9cdd6302",
                "2f15f8848d6c1155"
            ]
        ]
    },
    {
        "id": "18fb7b8b9cdd6302",
        "type": "function",
        "z": "40e2d7bc7787ade7",
        "name": "Parse PPD Payload",
        "func": "var data = JSON.parse(msg.payload);\nmsg.payload = data.ppd;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1040,
        "wires": [
            [
                "6adba060e9841633"
            ]
        ]
    },
    {
        "id": "6adba060e9841633",
        "type": "ui_gauge",
        "z": "40e2d7bc7787ade7",
        "name": "",
        "group": "4a30a8e0116ae52c",
        "order": 4,
        "width": 6,
        "height": 4,
        "gtype": "wave",
        "title": "PPD",
        "label": "%",
        "format": "{{value}}",
        "min": "0",
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "33",
        "seg2": "66",
        "diff": false,
        "className": "",
        "x": 1050,
        "y": 1040,
        "wires": []
    },
    {
        "id": "b8ee54f0ac94acf0",
        "type": "ui_switch",
        "z": "40e2d7bc7787ade7",
        "name": "",
        "label": "Enable PMV Follower",
        "tooltip": "",
        "group": "4a30a8e0116ae52c",
        "order": 10,
        "width": 12,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 180,
        "y": 400,
        "wires": [
            [
                "45b99a1551502a35"
            ]
        ]
    },
    {
        "id": "45b99a1551502a35",
        "type": "change",
        "z": "40e2d7bc7787ade7",
        "name": "Set Flow Enable PMV Follower",
        "rules": [
            {
                "t": "set",
                "p": "enableFollower",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "x": 490,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "3ac6e664bd290627",
        "type": "function",
        "z": "40e2d7bc7787ade7",
        "name": "Format enableFollower Payload",
        "func": "var enableFollower = flow.get('enableFollower');\nmsg.payload = {\n    enFollower: enableFollower\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 720,
        "wires": [
            [
                "f5b98e478e879b05"
            ]
        ]
    },
    {
        "id": "f5b98e478e879b05",
        "type": "mqtt out",
        "z": "40e2d7bc7787ade7",
        "name": "",
        "topic": "ac/control/enableFollower",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "78e567fe49f2df20",
        "x": 990,
        "y": 720,
        "wires": []
    },
    {
        "id": "e1562dc99851a2c3",
        "type": "mqtt in",
        "z": "40e2d7bc7787ade7",
        "name": "",
        "topic": "ac/system/airTemperatureFix",
        "qos": "2",
        "datatype": "utf8",
        "broker": "78e567fe49f2df20",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 80,
        "wires": [
            [
                "b55a393fbe2202ad",
                "b42a97b63f8fbdbf"
            ]
        ]
    },
    {
        "id": "b55a393fbe2202ad",
        "type": "function",
        "z": "40e2d7bc7787ade7",
        "name": "Parse airTemperatureFix Payload",
        "func": "var data = JSON.parse(msg.payload);\nmsg.payload = data.tafix;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 80,
        "wires": [
            [
                "ui_numeric"
            ]
        ]
    },
    {
        "id": "ddfe7c3269d598fd",
        "type": "function",
        "z": "40e2d7bc7787ade7",
        "name": "Parse airTemperature Payload",
        "func": "var airTemperature = flow.get('airTemperature');\nmsg.payload = airTemperature;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 800,
        "wires": [
            [
                "7d7181256aa98010"
            ]
        ]
    },
    {
        "id": "7d7181256aa98010",
        "type": "ui_chart",
        "z": "40e2d7bc7787ade7",
        "name": "airTemp",
        "group": "4a30a8e0116ae52c",
        "order": 9,
        "width": 12,
        "height": 4,
        "label": "Air Temperature vs Time",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "40",
        "removeOlder": "5",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1040,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "977e2a7979b72e14",
        "type": "file",
        "z": "40e2d7bc7787ade7",
        "name": "",
        "filename": "/home/dev/ac_control_ws/ac_control.log",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1340,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "4e6e75fa207828ff",
        "type": "function",
        "z": "40e2d7bc7787ade7",
        "name": "Log out msgs",
        "func": "var airTemperature = flow.get('airTemperature');\nvar radiantTemperature = flow.get('radiantTemperature');\nvar clothingLevel = flow.get('clothingLevel');\nvar metabolicRate = flow.get('metabolicRate');\nvar airVelocity = flow.get('airVelocity');\nvar relativeHumidity = flow.get('relativeHumidity');\n\nvar now = new Date();\nvar formattedTime = now.toISOString();\n\nvar logEntryOut = \n    \"[\" + formattedTime + \"] [OUTGOING]: \" + \"{ ta: \" + airTemperature + \" } \\n\" +\n    \"[\" + formattedTime + \"] [OUTGOING]: \" + \"{ tr: \" + radiantTemperature + \" } \\n\" +\n    \"[\" + formattedTime + \"] [OUTGOING]: \" + \"{ vel: \" + airVelocity + \" } \\n\" +\n    \"[\" + formattedTime + \"] [OUTGOING]: \" + \"{ rh: \" + relativeHumidity + \" } \\n\" +\n    \"[\" + formattedTime + \"] [OUTGOING]: \" + \"{ met: \" + metabolicRate + \" } \\n\" +\n    \"[\" + formattedTime + \"] [OUTGOING]: \" + \"{ clo: \" + clothingLevel + \" }\";\n\nflow.set('logEntryOut', logEntryOut);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 840,
        "wires": [
            [
                "587ed0570921a636"
            ]
        ]
    },
    {
        "id": "587ed0570921a636",
        "type": "change",
        "z": "40e2d7bc7787ade7",
        "name": "Prepare Log Entry Out",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "logEntryOut",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 840,
        "wires": [
            [
                "977e2a7979b72e14"
            ]
        ]
    },
    {
        "id": "b6b7f037a277da73",
        "type": "function",
        "z": "40e2d7bc7787ade7",
        "name": "Log in msg",
        "func": "var payload = JSON.parse(msg.payload);\nvar pmv = payload.pmv;\n\nvar now = new Date();\nvar formattedTime = now.toISOString();\n\nvar logEntryInPMV = \"[\" + formattedTime + \"] [INCOMING]: { pmv: \" + pmv + \" }\";\n\nflow.set('logEntryInPMV', logEntryInPMV);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 920,
        "wires": [
            [
                "a182d907b09cef19"
            ]
        ]
    },
    {
        "id": "a182d907b09cef19",
        "type": "change",
        "z": "40e2d7bc7787ade7",
        "name": "Prepare Log Entry In",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "logEntryInPMV",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 920,
        "wires": [
            [
                "977e2a7979b72e14"
            ]
        ]
    },
    {
        "id": "2f15f8848d6c1155",
        "type": "function",
        "z": "40e2d7bc7787ade7",
        "name": "Log in msg",
        "func": "var payload = JSON.parse(msg.payload);\nvar ppd = payload.ppd;\n\nvar now = new Date();\nvar formattedTime = now.toISOString();\n\nvar logEntryInPPD = \"[\" + formattedTime + \"] [INCOMING]: { ppd: \" + ppd + \" }\";\n\nflow.set('logEntryInPPD', logEntryInPPD);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 960,
        "wires": [
            [
                "4d07b5069bb79743"
            ]
        ]
    },
    {
        "id": "4d07b5069bb79743",
        "type": "change",
        "z": "40e2d7bc7787ade7",
        "name": "Prepare Log Entry In",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "logEntryInPPD",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 960,
        "wires": [
            [
                "977e2a7979b72e14"
            ]
        ]
    },
    {
        "id": "b42a97b63f8fbdbf",
        "type": "function",
        "z": "40e2d7bc7787ade7",
        "name": "Log in msg",
        "func": "var payload = JSON.parse(msg.payload);\nvar tafix = payload.tafix;\n\nvar now = new Date();\nvar formattedTime = now.toISOString();\n\nvar logEntryInTaFix = \"[\" + formattedTime + \"] [INCOMING]: { tafix: \" + tafix + \" }\";\n\nflow.set('logEntryInTaFix', logEntryInTaFix);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 40,
        "wires": [
            [
                "fad7330326d90f24"
            ]
        ]
    },
    {
        "id": "fad7330326d90f24",
        "type": "change",
        "z": "40e2d7bc7787ade7",
        "name": "Prepare Log Entry In",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "logEntryInTaFix",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 40,
        "wires": [
            [
                "977e2a7979b72e14"
            ]
        ]
    }
]